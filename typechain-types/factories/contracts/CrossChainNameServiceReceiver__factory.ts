/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CrossChainNameServiceReceiver,
  CrossChainNameServiceReceiverInterface,
} from "../../contracts/CrossChainNameServiceReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "lookup",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "sourceChainSelector",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "InvalidRouter",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "InvalidSourceChain",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "i_lookup",
    outputs: [
      {
        internalType: "contract ICrossChainNameServiceLookup",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "i_router",
    outputs: [
      {
        internalType: "contract IRouterClient",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "i_sourceChainSelector",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101006040523480156200001257600080fd5b50604051620010283803806200102883398181016040528101906200003891906200021f565b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ae5760006040517fd7f73334000000000000000000000000000000000000000000000000000000008152600401620000a591906200028c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508067ffffffffffffffff1660e08167ffffffffffffffff1681525050505050620002a9565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a28262000175565b9050919050565b620001b48162000195565b8114620001c057600080fd5b50565b600081519050620001d481620001a9565b92915050565b600067ffffffffffffffff82169050919050565b620001f981620001da565b81146200020557600080fd5b50565b6000815190506200021981620001ee565b92915050565b6000806000606084860312156200023b576200023a62000170565b5b60006200024b86828701620001c3565b93505060206200025e86828701620001c3565b9250506040620002718682870162000208565b9150509250925092565b620002868162000195565b82525050565b6000602082019050620002a360008301846200027b565b92915050565b60805160a05160c05160e051610d30620002f8600039600081816101ff015261033d01526000818161031401526103d40152600061022301526000818161024701526102ee0152610d306000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a7146100675780633bbcb4f814610097578063581bdd16146100b557806385572ffb146100d3578063b0f479a1146100ef578063e0b30b1f1461010d575b600080fd5b610081600480360381019061007c91906104d1565b61012b565b60405161008e9190610519565b60405180910390f35b61009f6101fd565b6040516100ac9190610557565b60405180910390f35b6100bd610221565b6040516100ca91906105f1565b60405180910390f35b6100ed60048036038101906100e89190610630565b610245565b005b6100f76102ea565b604051610104919061069a565b60405180910390f35b610115610312565b60405161012291906106d6565b60405180910390f35b60007f85572ffb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101f657507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d557336040517fd7f733340000000000000000000000000000000000000000000000000000000081526004016102cc919061069a565b60405180910390fd5b6102e7816102e290610afd565b610336565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b80602001517f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff168167ffffffffffffffff16146103b357806040517f1279ec8a0000000000000000000000000000000000000000000000000000000081526004016103aa9190610557565b60405180910390fd5b60008083606001518060200190518101906103ce9190610c19565b915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631e59c52983836040518363ffffffff1660e01b815260040161042d929190610cca565b600060405180830381600087803b15801561044757600080fd5b505af115801561045b573d6000803e3d6000fd5b5050505050505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6104ae81610479565b81146104b957600080fd5b50565b6000813590506104cb816104a5565b92915050565b6000602082840312156104e7576104e661046f565b5b60006104f5848285016104bc565b91505092915050565b60008115159050919050565b610513816104fe565b82525050565b600060208201905061052e600083018461050a565b92915050565b600067ffffffffffffffff82169050919050565b61055181610534565b82525050565b600060208201905061056c6000830184610548565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105b76105b26105ad84610572565b610592565b610572565b9050919050565b60006105c98261059c565b9050919050565b60006105db826105be565b9050919050565b6105eb816105d0565b82525050565b600060208201905061060660008301846105e2565b92915050565b600080fd5b600060a082840312156106275761062661060c565b5b81905092915050565b6000602082840312156106465761064561046f565b5b600082013567ffffffffffffffff81111561066457610663610474565b5b61067084828501610611565b91505092915050565b600061068482610572565b9050919050565b61069481610679565b82525050565b60006020820190506106af600083018461068b565b92915050565b60006106c0826105be565b9050919050565b6106d0816106b5565b82525050565b60006020820190506106eb60008301846106c7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61073f826106f6565b810181811067ffffffffffffffff8211171561075e5761075d610707565b5b80604052505050565b6000610771610465565b905061077d8282610736565b919050565b600080fd5b6000819050919050565b61079a81610787565b81146107a557600080fd5b50565b6000813590506107b781610791565b92915050565b6107c681610534565b81146107d157600080fd5b50565b6000813590506107e3816107bd565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561080e5761080d610707565b5b610817826106f6565b9050602081019050919050565b82818337600083830152505050565b6000610846610841846107f3565b610767565b905082815260208101848484011115610862576108616107ee565b5b61086d848285610824565b509392505050565b600082601f83011261088a576108896107e9565b5b813561089a848260208601610833565b91505092915050565b600067ffffffffffffffff8211156108be576108bd610707565b5b602082029050602081019050919050565b600080fd5b6108dd81610679565b81146108e857600080fd5b50565b6000813590506108fa816108d4565b92915050565b6000819050919050565b61091381610900565b811461091e57600080fd5b50565b6000813590506109308161090a565b92915050565b60006040828403121561094c5761094b6106f1565b5b6109566040610767565b90506000610966848285016108eb565b600083015250602061097a84828501610921565b60208301525092915050565b6000610999610994846108a3565b610767565b905080838252602082019050604084028301858111156109bc576109bb6108cf565b5b835b818110156109e557806109d18882610936565b8452602084019350506040810190506109be565b5050509392505050565b600082601f830112610a0457610a036107e9565b5b8135610a14848260208601610986565b91505092915050565b600060a08284031215610a3357610a326106f1565b5b610a3d60a0610767565b90506000610a4d848285016107a8565b6000830152506020610a61848285016107d4565b602083015250604082013567ffffffffffffffff811115610a8557610a84610782565b5b610a9184828501610875565b604083015250606082013567ffffffffffffffff811115610ab557610ab4610782565b5b610ac184828501610875565b606083015250608082013567ffffffffffffffff811115610ae557610ae4610782565b5b610af1848285016109ef565b60808301525092915050565b6000610b093683610a1d565b9050919050565b600067ffffffffffffffff821115610b2b57610b2a610707565b5b610b34826106f6565b9050602081019050919050565b60005b83811015610b5f578082015181840152602081019050610b44565b60008484015250505050565b6000610b7e610b7984610b10565b610767565b905082815260208101848484011115610b9a57610b996107ee565b5b610ba5848285610b41565b509392505050565b600082601f830112610bc257610bc16107e9565b5b8151610bd2848260208601610b6b565b91505092915050565b6000610be682610572565b9050919050565b610bf681610bdb565b8114610c0157600080fd5b50565b600081519050610c1381610bed565b92915050565b60008060408385031215610c3057610c2f61046f565b5b600083015167ffffffffffffffff811115610c4e57610c4d610474565b5b610c5a85828601610bad565b9250506020610c6b85828601610c04565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000610c9c82610c75565b610ca68185610c80565b9350610cb6818560208601610b41565b610cbf816106f6565b840191505092915050565b60006040820190508181036000830152610ce48185610c91565b9050610cf3602083018461068b565b939250505056fea2646970667358221220a77ce39d14d407ecb804d2474536f7f1d66a427399f376b0b4f320657d16f5c864736f6c63430008130033";

type CrossChainNameServiceReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CrossChainNameServiceReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CrossChainNameServiceReceiver__factory extends ContractFactory {
  constructor(...args: CrossChainNameServiceReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    router: PromiseOrValue<string>,
    lookup: PromiseOrValue<string>,
    sourceChainSelector: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CrossChainNameServiceReceiver> {
    return super.deploy(
      router,
      lookup,
      sourceChainSelector,
      overrides || {}
    ) as Promise<CrossChainNameServiceReceiver>;
  }
  override getDeployTransaction(
    router: PromiseOrValue<string>,
    lookup: PromiseOrValue<string>,
    sourceChainSelector: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      router,
      lookup,
      sourceChainSelector,
      overrides || {}
    );
  }
  override attach(address: string): CrossChainNameServiceReceiver {
    return super.attach(address) as CrossChainNameServiceReceiver;
  }
  override connect(signer: Signer): CrossChainNameServiceReceiver__factory {
    return super.connect(signer) as CrossChainNameServiceReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CrossChainNameServiceReceiverInterface {
    return new utils.Interface(_abi) as CrossChainNameServiceReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CrossChainNameServiceReceiver {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CrossChainNameServiceReceiver;
  }
}
